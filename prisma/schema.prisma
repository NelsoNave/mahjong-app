// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  userName   String
  image      String
  backgroundImage String?
  language   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastLoginAt DateTime?
  friends    Friend[] @relation("UserFriends")
  friendOf   Friend[] @relation("FriendUsers")
  subscriptionPlanId Int?
  subscriptionPlan SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  games Game[] @relation("CreatedBy")
  chipResults ChipResults[] @relation("UserChipResults")
  roundResults RoundResults[] @relation("UserRoundResults")
  @@map("users")
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friend {
  userId    Int
  friendId  Int
  status    FriendStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, friendId])

  user    User @relation("UserFriends", fields: [userId], references: [id])
  friend  User @relation("FriendUsers", fields: [friendId], references: [id])

  @@map("friends")
}

model SubscriptionPlan {
  id         Int      @id @default(autoincrement())
  name       String
  price      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      User[]

  @@map("subscription_plans")
}

enum GameType {
  FREE
  SET
}

enum NumberOfPlayers {
  THREE
  FOUR
}

model Game {
  id             Int            @id @default(autoincrement())
  gameType       GameType
  numberOfPlayers NumberOfPlayers
  playedAt       DateTime
  rate           Int
  chipRate      Int
  fee           Int
  createdBy      Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user User @relation("CreatedBy", fields: [createdBy], references: [id])
  chipResults ChipResults[] @relation("GameChipResults")
  rounds Rounds[] @relation("GameRounds")
  @@map("games")
}


model ChipResults {
  id Int @id @default(autoincrement())
  gameId Int
  userId Int?
  chipChange Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation("GameChipResults", fields: [gameId], references: [id])
  user User? @relation("UserChipResults", fields: [userId], references: [id])
  @@map("chip_results")
}

model Rounds {
  id Int @id @default(autoincrement())
  gameId Int
  roundNumber Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game Game @relation("GameRounds", fields: [gameId], references: [id])
  roundResults RoundResults[] @relation("RoundResults")
  @@map("rounds")
}

model RoundResults {
  id Int @id @default(autoincrement())
  roundId Int
  userId Int?
  position Int
  scoreChange Int
  rank Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  round Rounds @relation("RoundResults", fields: [roundId], references: [id])
  user User? @relation("UserRoundResults", fields: [userId], references: [id])
  @@map("round_results")
}
